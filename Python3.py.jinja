{# 
Jinja2 template for generating neuron implementation code in Python3.
Authored by Liam Staras, 2020. Licensed under the GeNN Contributor Standard License 1.0.0.
Part of the GeNN project.

PARAMETERS and INPUTS:
STRING 'id' as a unique identifier for the neuron
LIST 'parameters' as the parameter names for the model
LIST of DICTS 'variables' as the variable names and types for the model
LIST of DICTS 'derived_parameters' as the names and derivation functions (in Python code of dependent parameters for the model
STRING 'sim_code' as the code describing the function of the neuron
STRING 'threshold_condition_code' as the code describing the threshold condition
STRING 'reset_code' as the code describing the reset operation
STRING 'support_code' as the additional support code for the neuron
LIST of DICTS 'additional_parameters' as the names and types of additional parameters for the model
LIST of DICTS 'additional_variables' as the names, types and initial values of additional variables for the model
BOOLEAN 'is_auto_refractory_required' as whether the model requires auto-refractory logic to be generated

NOT IMPLEMENTED: 'custom_body'

#}
{{ id }}_model = genn_model.create_custom_neuron_class(
    class_name = "{{ id }}",
    param_names = [ {% for parameter in parameters %}"{{ parameter }}"{% if not loop.last %}, {% endif %}{% endfor %} ],
    var_name_types = [ {% for variable in variables %}( "{{ variable.name }}", "{{ variable.type }}" ){% if not loop.last %}, {% endif %}{% endfor %} ],
    derived_params = [ {% for parameter in derived_params %}( "{{ parameter.name }}", {% if parameter.derivation.python is defined %}{{ parameter.derivation.python }}{% else %}{{ parameter.derivation.generic }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %} ],
    sim_code='''
    {{- sim_code|indent }}
    ''',
    threshold_condition_code = '''
    {{- threshold_condition_code|indent }}
    ''',
    reset_code = '''
    {{- reset_code|indent }}
    ''',
    support_code = '''
    {{- support_code|indent }}
    ''',
    extra_global_params = [ {% for parameters in additional_parameters %}( "{{ parameter.name }}", "{{ parameter.type }}" ){% if not loop.last %}, {% endif %}{% endfor %} ],
    additional_input_vars = [ {% for variable in additional_variables %}( "{{ variable.name }}", "{{ variable.type }}", {{ variable.initial }} ){% if not loop.last %}, {% endif %}{% endfor %} ],
    is_auto_refractory_required = {{ is_auto_refractory_required }}
)
